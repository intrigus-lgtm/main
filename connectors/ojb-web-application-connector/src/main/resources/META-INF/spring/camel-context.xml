<?xml version="1.0" encoding="UTF-8"?>

<!-- Configures the Camel Context-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       ">
    <!-- needed cxf imports -->
    <import resource="classpath:META-INF/cxf/cxf.xml"/>
	
	<camel:camelContext xmlns="http://camel.apache.org/schema/spring">
	    
	    
	    <!--Person Merge Notification Search Response Listener -->
	    <camel:route id="personMergeSearchResultsHandlerRoute" autoStartup="false">
	    	<from uri="personMergeSearchResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Recieved response message - Person Merge Search Results: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:personSearchMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:personSearchRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>
	    
	    	        
	    <!-- Criminal History Response Listener -->
	    <camel:route id="personQueryResultsHandlerCriminalHistoryServiceRoute" autoStartup="false">
	    	<from uri="personQueryResultsHandlerCriminalHistoryServiceEndpoint"/>
	    	<camel:log message="Recieved response message - Criminal History: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
			<camel:to uri="bean:warrantsMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:criminalHistoryRequestProcessor?method=updateMapWithResponse"/>

	    </camel:route>

	    <!-- Warrants Response Listener -->
	    <camel:route id="personQueryResultsHandlerWarrantsServiceRoute" autoStartup="false">
	    	<from uri="personQueryResultsHandlerWarrantsServiceEndpoint"/>
	    	<camel:log message="Recieved response message - Warrants: ${body}" loggingLevel="DEBUG"/>
	    	
	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
			<camel:to uri="bean:warrantsMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:warrantsRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>

	    <!-- Incident Report Response Listener -->
	    <camel:route id="incidentReportResultsHandlerServiceRoute" autoStartup="false">
	    	<from uri="incidentReportResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Recieved response message - Incident Report ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
			<camel:to uri="bean:incidentReportRequestMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:incidentReportRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>

	    <!-- Incident Search Request Listener, This route handles only Person / Vehicle to Incident Queries -->
	    <camel:route id="personVehicleToIncidentSearchResultsHandlerRoute" autoStartup="false">
	    	<from uri="personVehicleToIncidentSearchResultsHandlerServiceEndpoint"/>
	    		    	
	    	<camel:log message="Recieved response message - Incident Search ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
	    	<!-- We can use any message processor to process the payload, it is generic method -->
			<camel:to uri="bean:personToIncidentMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:personVehicleToIncidentSearchRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>

	    <!--Incident Merge Notification Search Response Listener -->
	    <camel:route id="incidentSearchResultsHandlerRoute" autoStartup="false">
	    	<from uri="incidentSearchResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Recieved response message - Incident Merge Search Results: ${body}" loggingLevel="INFO"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. -->
			<camel:to uri="bean:incidentSearchMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:incidentSearchRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	    

	    <!--Incident Merge Notification Search Response Listener -->
	    <camel:route id="vehicleSearchResultsHandlerRoute" autoStartup="false">
	    	<from uri="vehicleSearchResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Recieved response message - Vehicle Merge Search Results: ${body}" loggingLevel="INFO"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. -->
			<camel:to uri="bean:vehicleSearchMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:vehicleSearchRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	    
	    
	    <!--Firearm Merge Notification Search Response Listener -->
	    <camel:route id="firearmSearchResultsHandlerRoute" autoStartup="false">
	    	<from uri="firearmSearchResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Recieved response message - Firearm Merge Search Results: ${body}" loggingLevel="INFO"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. -->
			<camel:to uri="bean:firearmSearchMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:firearmSearchRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	
	    
	    <!--Firearm Registration Query Response Listener -->
	    <camel:route id="firearmRegistrationQueryResultsHandlerRoute" autoStartup="false">
	    	<from uri="firearmRegistrationQueryResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Recieved response message - Firearm Reg Query Results: ${body}" loggingLevel="INFO"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. -->
			<camel:to uri="bean:firearmRegistrationQueryMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:firearmRegistrationQueryRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	
	    
	    <!-- Subscription Search Response Listener -->
	    <camel:route id="subscriptionSearchResultsHandlerRoute" autoStartup="false">
	    	<from uri="subscriptionSearchResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Recieved response message - Subscription Search: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
			<camel:to uri="bean:subscriptionSearchMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:subscriptionSearchRequestProcessor?method=updateMapWithResponse"/>

	    </camel:route>

	    <!-- Subscription Query Response Listener -->
	    <camel:route id="subscriptionQueryResultsHandlerRoute" autoStartup="false">
	    	<from uri="subscriptionQueryResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Recieved response message - Subscription Query: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
			<camel:to uri="bean:subscriptionQueryMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:subscriptionQueryRequestProcessor?method=updateMapWithResponse"/>

	    </camel:route>

	    <!--Policy Based Access Control Response Listener -->
	    <camel:route id="identityBasedAccessControlResultsHandlerRoute" autoStartup="false">
	    	<from uri="accessControlResponseServiceEndpoint"/>
	    	<camel:log message="Recieved response message - Identity Based Access Control result: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:identityBasedAccessControlMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:identityBasedAccessControlRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>

	    <!--Policy Acknowledgement Recording Response Listener -->
	    <camel:route id="policyAcknowledgementRecordingResultsHandlerRoute" autoStartup="false">
	    	<from uri="policyAcknowledgementRecordingResponseServiceEndpoint"/>
	    	<camel:log message="Recieved response message - Policy Acknowledgement Recording Response: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:policyAcknowledgingMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:policyAcknowledgingRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	    

	    <!--Juvenile Case Plan Listener -->
	    <camel:route id="juvenileCasePlanHistoryResultsHandlerRoute" autoStartup="false">
	    	<from uri="juvenileCasePlanHistoryResultsHandlerServiceEndpoint"/>
	    	
	    	<camel:log message="Recieved response message - Juvenile Case Plan Response:${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:juvenileQueryCasePlanHistoryMessageProcessor?method=processRequestPayload" />
			
	    	
			<camel:to uri="bean:juvenileCasePlanHistoryRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	    

	    <!--Juvenile Hearing Listener -->
	    <camel:route id="juvenileHearingHistoryResultsHandlerRoute" autoStartup="false">
	    	<from uri="juvenileHearingHistoryResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Recieved response message - Juvenile Hearing Response: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:juvenileQueryHearingHistoryMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:juvenileHearingHistoryRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	    

	    <!--Juvenile Intake Listener -->
	    <camel:route id="juvenileIntakeHistoryResultsHandlerRoute" autoStartup="false">
	    	<from uri="juvenileIntakeHistoryResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Recieved response message - Juvenile Intake Response: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:juvenileQueryIntakeHistoryMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:juvenileIntakeHistoryRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	    

	    <!--Juvenile Offense Listener -->
	    <camel:route id="juvenileOffenseHistoryResultsHandlerRoute" autoStartup="false">
	    	<from uri="juvenileOffenseHistoryResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Recieved response message - Juvenile Offense Response: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:juvenileQueryOffenseHistoryMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:juvenileOffenseHistoryRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	    

	    <!--Juvenile Placement Listener -->
	    <camel:route id="juvenilePlacementHistoryResultsHandlerRoute" autoStartup="false">
	    	<from uri="juvenilePlacementHistoryResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Recieved response message - Juvenile Placement Response: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:juvenileQueryPlacementHistoryMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:juvenilePlacementHistoryRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	    

	    <!--Juvenile Referral Listener -->
	    <camel:route id="juvenileReferralHistoryResultsHandlerRoute" autoStartup="false">
	    	<from uri="juvenileReferralHistoryResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Recieved response message - Juvenile Referral Response: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:juvenileQueryReferralHistoryMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:juvenileReferralHistoryRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	    
	    
	</camel:camelContext>

	<!-- SAML map to persist tokens between CXF and Camel -->	
	<bean id="ojbSamlMap" class="org.ojbc.util.camel.security.saml.OJBSamlMap" />
	
</beans>
