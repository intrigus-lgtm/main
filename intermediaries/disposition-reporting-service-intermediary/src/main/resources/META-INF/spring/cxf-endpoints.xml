<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xmlns:sec="http://cxf.apache.org/configuration/security"
       xmlns:http="http://cxf.apache.org/transports/http/configuration"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:httpj="http://cxf.apache.org/transports/http-jetty/configuration"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://cxf.apache.org/configuration/security	http://cxf.apache.org/schemas/configuration/security.xsd
       http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
       http://cxf.apache.org/transports/http-jetty/configuration http://cxf.apache.org/schemas/configuration/http-jetty.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
       ">
	<!-- needed cxf imports -->
	<import resource="classpath:META-INF/cxf/cxf.xml" />
	
	<cxf:cxfEndpoint id="dispositionReportingServiceIntermediary"
		address="${dispositionReportingService.dispositionServiceIntermediaryEndpoint}"
		wsdlURL="classpath:service-specifications/Disposition_Reporting_Service/schemas/SIP_WS_1.3/Disposition_Reporting_Service.wsdl"
		serviceName="ojbc:Disposition-Reporting-ServiceService" 
		endpointName="ojbc:Disposition-Reporting-Secure-Service"
		xmlns:ojbc="http://ojbc.org/Services/WSDL/DispositionReportingService/1.0">
		<cxf:properties>
			<entry key="ws-security.callback-handler" value-ref="passwordCallbackHandler" />
			<entry key="ws-security.signature.properties" value-ref="criminalHistoryRecordInformationKeystoreProperties" />
			<entry key="ws-security.signature.username" value="${dispositionReportingService.keystoreCertificateAlias}" />
		</cxf:properties>		
	</cxf:cxfEndpoint>

	<cxf:cxfEndpoint id="dispositionReportingServiceAdapter"
		address="${dispositionReportingService.dispositionServiceAdapterEndpoint}"
		wsdlURL="classpath:service-specifications/Disposition_Reporting_Service/schemas/SIP_WS_1.3/Disposition_Reporting_Service.wsdl"
		serviceName="ojbc:Disposition-Reporting-ServiceService" 
		endpointName="ojbc:Disposition-Reporting-Secure-Service"
		xmlns:ojbc="http://ojbc.org/Services/WSDL/DispositionReportingService/1.0">
		<cxf:properties>
			<entry key="ws-security.callback-handler" value-ref="passwordCallbackHandler" />
			<entry key="ws-security.signature.properties" value-ref="criminalHistoryRecordInformationKeystoreProperties" />
			<entry key="ws-security.signature.username" value="${dispositionReportingService.keystoreCertificateAlias}" />
		</cxf:properties>		
	</cxf:cxfEndpoint>

	<bean id="dropAllMessageHeadersStrategy" class="org.apache.camel.component.cxf.common.header.CxfHeaderFilterStrategy">
	    <!--  Set relayHeaders to false to drop all SOAP headers -->
    	<property name="relayHeaders" value="false"/>
   
	</bean>
	
	<bean id="passwordCallbackHandler" class="org.ojbc.util.ws.security.ClientCallbackMap">
	    <property name="passwords">
            <map>
                <entry key="${dispositionReportingService.keystoreCertificateAlias}" value="${dispositionReportingService.keyPassword}"/>
            </map>
        </property>
	</bean>
	
	<!-- Define a Properties object with the properties required by the org.apache.ws.security.components.crypto.Merlin 
		WSS4j Crypto implementation. This crypto config is used for signature creation and validation. -->
	<util:properties id="criminalHistoryRecordInformationKeystoreProperties">		
		<!-- Defines the implementation class. -->
		<prop key="org.apache.ws.security.crypto.provider">org.apache.ws.security.components.crypto.Merlin</prop>		
		<!-- The type of the keystore pointed to by org.apache.ws.security.crypto.merlin.file. -->
		<prop key="org.apache.ws.security.crypto.merlin.keystore.type">jks</prop>		
		<prop key="org.apache.ws.security.crypto.merlin.keystore.password">${dispositionReportingService.keystorePassword}</prop>				
		<prop key="org.apache.ws.security.crypto.merlin.file">${dispositionReportingService.keystoreLocation}</prop>		
	</util:properties>		
		      	
	<!-- Used for SSL/TLS Connection. No CCA, just SSL. -->
	<http:conduit
		name="https://.*">
		<http:tlsClientParameters disableCNCheck="true">
			<sec:trustManagers>
				<sec:keyStore type="JKS"
					password="${dispositionReportingService.truststorePassword}"
					file="${dispositionReportingService.truststoreLocation}" />
			</sec:trustManagers>
			<sec:cipherSuitesFilter>
				    <sec:include>TLS_DHE_RSA_WITH_AES_128_CBC_SHA</sec:include>
				    <sec:include>SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA</sec:include>
				    <sec:include>TLS_RSA_WITH_AES_128_CBC_SHA</sec:include>
				    <sec:include>SSL_RSA_WITH_3DES_EDE_CBC_SHA</sec:include>
			</sec:cipherSuitesFilter>
		</http:tlsClientParameters>
		<http:client AutoRedirect="true" Connection="Keep-Alive" />
	</http:conduit>	
	
	
   	<!-- 
   		Used for INBOUND SSL/TLS Connection. No CCA, just SSL.  Server side SSL connection 
   	-->
	<httpj:engine-factory id="ClientAuthHttpsSettings"
		bus="cxf">
		<httpj:engine port="${dispositionReportingService.portNumber}"> 
			<httpj:tlsServerParameters>
				<sec:keyManagers keyPassword="${dispositionReportingService.keyPassword}">
					<sec:keyStore type="jks" password="${dispositionReportingService.keystorePassword}" file="${dispositionReportingService.keystoreLocation}" />
				</sec:keyManagers>
				<sec:cipherSuitesFilter>
					    <sec:include>TLS_DHE_RSA_WITH_AES_128_CBC_SHA</sec:include>
					    <sec:include>SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA</sec:include>
					    <sec:include>TLS_RSA_WITH_AES_128_CBC_SHA</sec:include>
					    <sec:include>SSL_RSA_WITH_3DES_EDE_CBC_SHA</sec:include>
				</sec:cipherSuitesFilter>
				<sec:clientAuthentication want="false"
					required="false" />
			</httpj:tlsServerParameters>
		</httpj:engine>
	</httpj:engine-factory> 
		
</beans>
