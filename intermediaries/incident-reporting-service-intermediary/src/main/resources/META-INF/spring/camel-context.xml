<?xml version="1.0" encoding="UTF-8"?>

<!-- Configures the Camel Context -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:camel="http://camel.apache.org/schema/spring"
	xmlns:lexs="http://usdoj.gov/leisp/lexs/3.1" 
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       ">
	<!-- needed cxf imports -->
	<import resource="classpath:META-INF/cxf/cxf.xml" />	
	
	<!-- Error handlers in case of submission errors -->
	<import resource="error-handlers.xml" />
					
	<camel:camelContext xmlns="http://camel.apache.org/schema/spring" id="mainCamelContext">
		<camel:routeContextRef ref="errorHandlerRoutes"/>		

		<!-- CXF endpoint is inline to support testing -->	
		<camel:endpoint id="IncidentReportingServiceEndpoint"
			uri="cxf:bean:IncidentReportingService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${incidentReportingService.incidentReportingServiceIntermediaryCxflogging}" />
			
		<!-- Incident Reporting Service Handler -->
		<camel:route id="IncidentReportingServiceHandlerRoute">
			<camel:from uri="IncidentReportingServiceEndpoint" />
			
			<camel:to uri="bean:messageProcessor?method=processRequestPayload"/>

			<convertBodyTo type="java.lang.String" />

			<camel:setHeader headerName="submittingORI">
				<camel:xpath resultType="java.lang.String">//lexs:DataOwnerMetadata/lexs:DataOwnerIdentifier/lexs:ORI</camel:xpath>
			</camel:setHeader>
			
			<!-- This function will set the header 'callNDExSubmissionService' -->
			<camel:to
				uri="bean:incidentReportProcessor?method=confirmNdexAuthorizedOri"/>

				<!-- Multicast to the core services and derived bundle specific routes 
					so each route gets original message -->
				<camel:multicast stopOnException="false">
					<camel:pipeline>
						<camel:filter>
							<camel:simple>${in.header.callNDExSubmissionService} == 'true'</camel:simple>

							<camel:to uri="direct:callNDExService" />

						</camel:filter>
					</camel:pipeline>

					<camel:pipeline>
						<camel:to uri="direct:derivedRoutes" />
					</camel:pipeline>

				</camel:multicast>

		</camel:route>

		<camel:route errorHandlerRef="ndexDeadLetterErrorHandler" id="CallNDExSubmissionServiceRoute">
			<camel:from uri="direct:callNDExService" />
			
			<camel:log message="Inside route to call N-DEx service"/>
			
			<camel:to
				uri="xslt:xslt/removeStructuredPayload.xslt" />
				
			<camel:to uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage"/>
						
			<camel:setHeader headerName="operationName">
				<constant>ReportIncident</constant>
			</camel:setHeader>
			<camel:setHeader headerName="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/IncidentReportingService/1.0</constant>
			</camel:setHeader>				
			
			<camel:to
				uri="cxf:bean:N-DexSubmissionServiceFacade?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${incidentReportingService.incidentReportingServiceIntermediaryCxflogging}" />
			<log message="Called NDEx service" />
		</camel:route>
		
		<camel:route id="derivedRoutes">

			<camel:from uri="direct:derivedRoutes" />

			<!-- Set up derived endpoints -->
			<!-- typically we would use the {{ }} camel construct to get the property -->
			<!-- but this was causing an issue with an @ in a property.  This caused an attempted file resolution of a property -->
			<camel:setHeader headerName="routingSlipDerivedRoutes">
				<simple>${bean:endpointsToCall.trim}</simple>
			</camel:setHeader>

			<camel:filter>
				<camel:simple>${in.headers.routingSlipDerivedRoutes} != ''</camel:simple>

				<camel:log
					message="About to call derived routes using this routing slip: ${in.headers.routingSlipDerivedRoutes}" />

				<camel:recipientList>
					<camel:header>routingSlipDerivedRoutes</camel:header>
				</camel:recipientList>
			</camel:filter>

		</camel:route>		

	</camel:camelContext>
	
	<!-- bean that check to see if this is an authorized N-DEx or Charge Referral submission-->
	<bean id="incidentReportProcessor" class="org.ojbc.intermediaries.incidentreporting.IncidentReportProcessor">
		<constructor-arg type="java.lang.String">
			<value>${ndexAuthorizedORIList}</value>
		</constructor-arg>
		<constructor-arg type="java.lang.String">
			<value>${chargeReferralAuthorizedORIList}</value>
		</constructor-arg>
	</bean>
	
	<!-- typically we would use the {{ }} camel construct to get the property -->
	<!-- but this was causing an issue with an @ in a property.  This caused an attempted file resolution of a property -->
    <bean id="endpointsToCall" class="java.lang.String">
        <constructor-arg type="java.lang.String" value="${incidentReportingService.camelEndpointsToCall}" />
    </bean>	
	
	<bean id="messageProcessor" class="org.ojbc.util.camel.processor.MessageProcessor" />
	
	<!-- See this thread: http://stackoverflow.com/questions/11195506/increase-executor-queue-size-in-cxf-onewayprocessorinterceptor -->
    <bean id="cxf.default.workqueue" class="org.apache.cxf.workqueue.AutomaticWorkQueueImpl">
        <property name="name" value="default" />
        <property name="queueSize" value="2048" />
    </bean>	
</beans>
