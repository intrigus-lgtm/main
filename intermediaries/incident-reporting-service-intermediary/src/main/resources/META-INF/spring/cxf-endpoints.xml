<?xml version="1.0" encoding="UTF-8"?>

<!-- Configures the CXF beans-->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:cxf="http://camel.apache.org/schema/cxf" 
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:sec="http://cxf.apache.org/configuration/security" 
	xmlns:http="http://cxf.apache.org/transports/http/configuration"
	xmlns:httpj="http://cxf.apache.org/transports/http-jetty/configuration"
	xmlns:policy="http://cxf.apache.org/policy" 
	xmlns:maine="http://www.maine.gov/dps/msp/MaineIncidentReportNDEx"
	xmlns:camel="http://camel.apache.org/schema/spring"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
       http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
       http://cxf.apache.org/configuration/security	http://cxf.apache.org/schemas/configuration/security.xsd
       http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
       http://cxf.apache.org/transports/http-jetty/configuration http://cxf.apache.org/schemas/configuration/http-jetty.xsd
       http://cxf.apache.org/policy http://cxf.apache.org/schemas/policy.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       ">
       
	<!-- OJB Incident Reporting Service, hosted by this intermediary -->
	<cxf:cxfEndpoint id="IncidentReportingService"
		address="${incidentReportingService.incidentReportingServiceEndpoint}"
		wsdlURL="classpath:service-specifications/Incident_Reporting_Service/schema/SIP_WS_1.2/Incident_Reporting_Service.wsdl"
		serviceName="ojbc:Incident-Reporting-ServiceService" endpointName="ojbc:Incident-Reporting-Secure-Service"
		xmlns:ojbc="http://ojbc.org/Services/WSDL/IncidentReportingService/1.0">
 		<cxf:properties>
			<entry key="ws-security.callback-handler" value-ref="passwordCallbackHandler" />
			<entry key="ws-security.signature.properties" value-ref="incidentReportingKeystoreProperties" />
			<entry key="ws-security.signature.username" value="${incidentReportingService.intermediarykeystoreCertificateAlias}" />
		</cxf:properties> 
	</cxf:cxfEndpoint>

	<!-- OJB NDEx Submission Service, called by this intermediary -->
	<cxf:cxfEndpoint id="N-DexSubmissionServiceFacade"
		address="${NDExSubmission.N-DexSubmissionServiceEndpoint}"
		wsdlURL="classpath:service-specifications/Incident_Reporting_Service/schema/SIP_WS_1.2/Incident_Reporting_Service.wsdl"
		serviceName="ojbc:Incident-Reporting-ServiceService" endpointName="ojbc:Incident-Reporting-Secure-Service"
		xmlns:ojbc="http://ojbc.org/Services/WSDL/IncidentReportingService/1.0">
 		<cxf:properties>
			<entry key="ws-security.callback-handler" value-ref="passwordCallbackHandler" />
			<entry key="ws-security.signature.properties" value-ref="incidentReportingKeystoreProperties" />
			<entry key="ws-security.signature.username" value="${incidentReportingService.intermediarykeystoreCertificateAlias}" />
		</cxf:properties>
	</cxf:cxfEndpoint>              
              
	<httpj:engine-factory bus="cxf">
		<!-- you just need to specify the TLS Server configuration for the certain 
			port -->
		<httpj:engine port="${incidentReportingService.portNumber}">
			<httpj:tlsServerParameters>
				<sec:keyManagers
					keyPassword="${incidentReportingService.intermediaryKeyPassword}">
					<sec:keyStore type="JKS"
						password="${incidentReportingService.intermediaryKeystorePassword}"
						file="${incidentReportingService.intermediaryKeystoreLocation}" />
				</sec:keyManagers>
				<sec:cipherSuitesFilter>
					    <sec:include>TLS_DHE_RSA_WITH_AES_128_CBC_SHA</sec:include>
					    <sec:include>SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA</sec:include>
					    <sec:include>TLS_RSA_WITH_AES_128_CBC_SHA</sec:include>
					    <sec:include>SSL_RSA_WITH_3DES_EDE_CBC_SHA</sec:include>
				</sec:cipherSuitesFilter>
			</httpj:tlsServerParameters>
		</httpj:engine>
	</httpj:engine-factory>

	<!-- Conduit for http clients -->
	<http:conduit
		name="*.http-conduit">
		<http:tlsClientParameters disableCNCheck="true">
			<sec:trustManagers>
				<sec:keyStore type="JKS"
					password="${incidentReportingService.truststorePassword}"
					file="${incidentReportingService.truststoreLocation}" />
			</sec:trustManagers>
			<sec:cipherSuitesFilter>
				    <sec:include>TLS_DHE_RSA_WITH_AES_128_CBC_SHA</sec:include>
				    <sec:include>SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA</sec:include>
				    <sec:include>TLS_RSA_WITH_AES_128_CBC_SHA</sec:include>
				    <sec:include>SSL_RSA_WITH_3DES_EDE_CBC_SHA</sec:include>
			</sec:cipherSuitesFilter>
		</http:tlsClientParameters>
		<http:client AutoRedirect="true" Connection="Keep-Alive" />
	</http:conduit>

	<bean id="passwordCallbackHandler" class="org.ojbc.util.ws.security.ClientCallbackMap">
	    <property name="passwords">
            <map>
                <entry key="${incidentReportingService.intermediarykeystoreCertificateAlias}" value="${incidentReportingService.intermediaryKeyPassword}"/>
            </map>
        </property>
	</bean>

	<!-- Define a Properties object with the properties required by the org.apache.ws.security.components.crypto.Merlin 
		WSS4j Crypto implementation. This crypto config is used for signature creation 
		and validation. -->
	<util:properties id="incidentReportingKeystoreProperties">
		<!-- Defines the implementation class. -->
		<prop key="org.apache.ws.security.crypto.provider">org.apache.ws.security.components.crypto.Merlin</prop>
		<!-- The type of the keystore pointed to by org.apache.ws.security.crypto.merlin.file. -->
		<prop key="org.apache.ws.security.crypto.merlin.keystore.type">jks</prop>
		<!-- The password for the keystore file. -->
		<prop key="org.apache.ws.security.crypto.merlin.keystore.password">${incidentReportingService.intermediaryKeystorePassword}
		</prop>
		<!-- The password for the keystore file. -->
		<prop key="org.apache.ws.security.crypto.merlin.file">${incidentReportingService.intermediaryKeystoreLocation}
		</prop>
	</util:properties>


</beans>
